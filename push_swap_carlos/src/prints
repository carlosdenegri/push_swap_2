ft_printf("check\n");
ft_printf("%d\n", argc);
		// while (argc > simple.j)
		// 	simple.arr_int[simple.i++] = ft_atoi1(argv[simple.j++]);
		// while (simple.arr_int[simple.i])
		// 	simple.arr_int[simple.i++] = '\0';

	while (simple->arr_int[simple->i])
	{
		simple->arr_int[simple->j] = '\0';
		simple->j++;
		simple->i++;
	}

	simple.i = 0;
	while (simple.i < simple.k)
	{
		ft_printf("%d\n", simple.arr_int[simple.i]);
		simple.i++;
	}

	simple.i = 0;
	while (arg[simple.i])
	{
		if (ft_atoi1(&arg[simple.i]) > INT_MAX
			|| ft_atoi1(&arg[simple.i]) < INT_MIN)
			simple.i++;
		else
			return (false);
	}
	simple.i = 0;
	while (argc > simple.i + 1)
	{
		printf("%ld\n", simple.arr_int[simple.i]);
		simple.i++;
	}

int	ft_atoi(char *s)
{
	int			i;
	int			neg;
	int			num;

	i = 0;
	neg = 0;
	num = 0;
	while ((s[i] >= 9 && s[i] <= 13) || s[i] == 32)
		i++;
	if (s[i] == '-')
	{
		neg++;
		i++;
	}
	while (s[i] >= '0' && s[i] <= '9')
	{
		num = num * 10 + (s[i] - '0');
		i++;
	}
	if (neg == 1)
		num *= -1;
	return (num);
}

		while (simple->j < simple->k)
		{
			if (simple->arr_int[simple->i] == simple->arr_int[simple->j])
				return (0);
			simple->j++;
		}
		simple->i++;

	if (simple.counter == 2)
		two_arguments(argv[1], &simple);
	if (simple.counter == 3)
		while (argc > simple.j)
			more_arguments(argv[simple.j++], &simple);
	else
		return (0);
ft_printf("%d\n", simple.counter);
	simple.i = 0;
	while (argc > simple.i + 1)
	{
		printf("%ld\n", simple.arr_int[simple.i]);
		simple.i++;
	}